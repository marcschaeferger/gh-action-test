name: CI/CD Pipeline

permissions:
  contents: write          # gh-release
  packages: write          # GHCR push
  id-token: write          # Keyless-Signatures & Attestations
  attestations: write      # actions/attest-build-provenance
  security-events: write   # upload-sarif
  actions: read 

on:
  push:
    tags:
      - "*"

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      DOCKERHUB_IMAGE: docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}
      GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Log in to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag name
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        shell: bash

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            ${{ env.DOCKERHUB_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          tags: |
            type=raw,value=${{ env.TAG }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.version=${{ env.TAG }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}

      - name: Build and push (Docker Hub + GHCR)
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Compute image digest refs
        run: |
          echo "DIGEST=${{ steps.build.outputs.digest }}" >> $GITHUB_ENV
          echo "GHCR_REF=$GHCR_IMAGE@${{ steps.build.outputs.digest }}" >> $GITHUB_ENV
          echo "DH_REF=$DOCKERHUB_IMAGE@${{ steps.build.outputs.digest }}" >> $GITHUB_ENV
          echo "Built digest: ${{ steps.build.outputs.digest }}"
        shell: bash

      - name: Attest build provenance (GHCR)
        id: attest-ghcr
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ${{ env.GHCR_IMAGE }}
          subject-digest: ${{ steps.build.outputs.digest }}
          show-summary: true

      - name: Attest build provenance (Docker Hub)
        id: attest-dh
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ${{ env.DOCKERHUB_IMAGE }}
          subject-digest: ${{ steps.build.outputs.digest }}
          show-summary: true

      - name: Install cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0
        with:
          cosign-release: 'v3.0.2'

      - name: Sanity check cosign private key
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD:    ${{ secrets.COSIGN_PASSWORD }}
        run: |
          set -euo pipefail
          cosign public-key --key env://COSIGN_PRIVATE_KEY >/dev/null
        shell: bash

      - name: Sign GHCR image (digest) with key (recursive)
        env:
          COSIGN_YES: "true"
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD:    ${{ secrets.COSIGN_PASSWORD }}
        run: |
          set -euo pipefail
          echo "Signing ${GHCR_REF} (digest) recursively with provided key"
          cosign sign --key env://COSIGN_PRIVATE_KEY --recursive "${GHCR_REF}"
        shell: bash

      - name: Keyless sign & verify GHCR digest (OIDC)
        env:
          COSIGN_YES: "true"
          WORKFLOW_REF: ${{ github.workflow_ref }}  # owner/repo/.github/workflows/<file>@refs/tags/<tag>
          ISSUER: https://token.actions.githubusercontent.com
        run: |
          set -euo pipefail
          echo "Keyless signing ${GHCR_REF}"
          cosign sign --recursive "${GHCR_REF}"
          echo "Verify keyless (OIDC) signature policy on ${GHCR_REF}"
          cosign verify \
            --certificate-oidc-issuer "${ISSUER}" \
            --certificate-identity "https://github.com/${WORKFLOW_REF}" \
            "${GHCR_REF}" -o text
        shell: bash

      - name: Sign Docker Hub image (digest) with key (recursive)
        continue-on-error: true
        env:
          COSIGN_YES: "true"
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD:    ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_DOCKER_MEDIA_TYPES: "1"
        run: |
          set -euo pipefail
          echo "Signing ${DH_REF} (digest) recursively with provided key (Docker media types fallback)"
          cosign sign --key env://COSIGN_PRIVATE_KEY --recursive "${DH_REF}"
        shell: bash

      - name: Keyless sign & verify Docker Hub digest (OIDC)
        continue-on-error: true
        env:
          COSIGN_YES: "true"
          WORKFLOW_REF: ${{ github.workflow_ref }}
          ISSUER: https://token.actions.githubusercontent.com
          COSIGN_DOCKER_MEDIA_TYPES: "1"
        run: |
          set -euo pipefail
          echo "Keyless signing ${DH_REF} (Docker media types fallback)"
          cosign sign --recursive "${DH_REF}"
          echo "Verify keyless (OIDC) signature policy on ${DH_REF}"
          cosign verify \
            --certificate-oidc-issuer "${ISSUER}" \
            --certificate-identity "https://github.com/${WORKFLOW_REF}" \
            "${DH_REF}" -o text
        shell: bash

      - name: Verify signature (public key) GHCR digest + tag
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
        run: |
          set -euo pipefail
          TAG_VAR="${TAG}"
          echo "Verifying (digest) ${GHCR_REF}"
          cosign verify --key env://COSIGN_PUBLIC_KEY "$GHCR_REF" -o text
          echo "Verifying (tag) $GHCR_IMAGE:$TAG_VAR"
          cosign verify --key env://COSIGN_PUBLIC_KEY "$GHCR_IMAGE:$TAG_VAR" -o text
        shell: bash

      - name: Verify signature (public key) Docker Hub digest
        continue-on-error: true
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
          COSIGN_DOCKER_MEDIA_TYPES: "1"
        run: |
          set -euo pipefail
          echo "Verifying (digest) ${DH_REF} with Docker media types"
          cosign verify --key env://COSIGN_PUBLIC_KEY "${DH_REF}" -o text
        shell: bash

      - name: Trivy scan (GHCR image)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # v0.33.1
        continue-on-error: true
        with:
          image-ref: ${{ env.GHCR_IMAGE }}@${{ steps.build.outputs.digest }}
          format: sarif
          output: trivy-ghcr.sarif

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v4 # Need to Check SHA Version
        with:
          sarif_file: trivy-ghcr.sarif
          category: Image Vulnerability Scan

      - name: Build binaries
        run: |
          set -euo pipefail
          TAG_VAR="${TAG}"
          make go-build-release tag=$TAG_VAR
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        with:
          tag_name: ${{ env.TAG }}
          generate_release_notes: true
          files: |
            bin/*
          body: |
            ## Container Images
            - GHCR: `${{ env.GHCR_REF }}`
            - Docker Hub: `${{ env.DH_REF }}`

            **Digest:** `${{ steps.build.outputs.digest }}`
